#!/usr/bin/env python
import sys
import pkg_resources
import subprocess
from functools import lru_cache

PIP = [sys.executable, '-m', 'pip', "--disable-pip-version-check"]


def find_all_packages():
    output = subprocess.check_output(PIP + ['freeze'])
    return [o.split("==", 1)[0].replace("-", "_").lower() for o in output.decode().splitlines()]


@lru_cache(None)
def find_requires(pkg_name):
    pkg = pkg_resources.get_distribution(pkg_name)
    deps = pkg.requires()
    return [p.name.lower().replace("-", "_") for p in deps]


def find_should_removed_deps(pkg_name):
    pending = find_requires(pkg_name)
    all_packages = find_all_packages()

    need_check = set(all_packages) - set(pending)
    need_check.discard(pkg_name)
    pending_remove = set(pending)
    should_not_remove = set()
    for pkg in pending:
        deps = find_requires(pkg)
        union = set(deps) & pending_remove
        should_not_remove.update(union)

    pending_remove.difference_update(should_not_remove)
    for pkg in need_check:
        deps = find_requires(pkg)
        pending_remove.difference_update(deps)

    return [i for i in pending if i in pending_remove]


def deep_delete_package(pkg_name, ask=False):
    pending_deps = find_should_removed_deps(pkg_name)
    if ask:
        msg = "Will delete package %s" % pkg_name
        if pending_deps:
            msg += " and it's dependence '%s'" % (', '.join(pending_deps),)
        rv = input(msg + " [yes/No]: ").upper()
        if rv != "Y" and rv != "YES":
            return

    subprocess.call(PIP + ["uninstall -y"] + [pkg_name] + pending_deps)


def main():
    if len(sys.argv) == 1:
        return
    pkgs = sys.argv[1:]
    yes = False
    for i in pkgs:
        if i == '-y':
            yes = True
            pkgs.remove(i)
            break

    for pkg in pkgs:
        deep_delete_package(pkg, not yes)


if __name__ == '__main__':
    main()
