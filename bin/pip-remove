#!/usr/bin/env python
from __future__ import print_function
import argparse
import sys
import pkg_resources
import subprocess

try:
    from functools import lru_cache
except ImportError:
    def lru_cache(*args):
        def decorator(f):
            return f

        return decorator


def _input(msg):
    if sys.version_info[0] < 3:
        return raw_input(msg)
    return input(msg)


def pip_cmd(*args):
    rv = [sys.executable, '-m', 'pip', "--disable-pip-version-check"]
    rv.extend(args)
    return rv


def find_all_packages():
    return [
        pkg.project_name for pkg in pkg_resources.working_set
    ]


@lru_cache(None)
def find_requires(pkg_name):
    try:
        pkg = pkg_resources.get_distribution(pkg_name)
    except pkg_resources.DistributionNotFound:
        return []
    deps = pkg.requires()
    return [p.name for p in deps]


def find_should_removed_deps(pkg_name):
    pending = find_requires(pkg_name)
    all_packages = find_all_packages()

    need_check = set(all_packages) - set(pending)
    need_check.discard(pkg_name)
    pending_remove = set(pending)
    should_not_remove = set()
    for pkg in pending:
        deps = find_requires(pkg)
        union = set(deps) & pending_remove
        should_not_remove.update(union)

    pending_remove.difference_update(should_not_remove)
    for pkg in need_check:
        deps = find_requires(pkg)
        pending_remove.difference_update(deps)

    return [i for i in pending if i in pending_remove]


def deep_delete_package(pkg_name, ask=False):
    try:
        pkg_resources.get_distribution(pkg_name)
    except pkg_resources.DistributionNotFound:
        return
    pending_deps = find_should_removed_deps(pkg_name)
    if ask:
        msg = "Will delete package %s" % pkg_name
        if pending_deps:
            msg += " and it's dependence '%s'" % (', '.join(pending_deps),)
        rv = _input(msg + " [yes/No]: ").upper()
        if rv != "Y" and rv != "YES":
            return

    subprocess.call(pip_cmd("uninstall", "-y", pkg_name, *pending_deps))


def main():
    parse = argparse.ArgumentParser("pip-remove")
    parse.add_argument(
        "-y", "--yes", action='store_true', default=False,
        help="Don't ask for confirmation of uninstall deletions."
    )
    parse.add_argument("packages", action='append')

    args = parse.parse_args()

    sys.stderr.write("python path: %s\n" % sys.executable)
    sys.stderr.flush()

    for pkg in args.packages:
        deep_delete_package(pkg, not args.yes)


if __name__ == '__main__':
    main()
